seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect(c(0.5,55,-10,6))
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Jason")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[x==3|x==5|x==7])
odd <- c(3,5,7)
x[x == c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
set.seed(1)
rpois(5, 2)
?ppois
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
system.time()
install.packages("shiny")
run.example("01_hello")
runExample("01_hello")
library(shiny)
library(shiny)
install.packages("Rcpp")
library(shiny)
runExample("01_hello")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "BrB9s2o7gv6SN6nQQOtLk2zEy"
consumerSecret <- "8LbAgzNgBLJDgWXyYCylbzyuoi5ao7GWI9O0nA8Q3txLqy3Hfs"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
install.packages("twitteR")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "BrB9s2o7gv6SN6nQQOtLk2zEy"
consumerSecret <- "8LbAgzNgBLJDgWXyYCylbzyuoi5ao7GWI9O0nA8Q3txLqy3Hfs"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
require(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "BrB9s2o7gv6SN6nQQOtLk2zEy"
consumerSecret <- "8LbAgzNgBLJDgWXyYCylbzyuoi5ao7GWI9O0nA8Q3txLqy3Hfs"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
library(RCurl)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "BrB9s2o7gv6SN6nQQOtLk2zEy"
consumerSecret <- "8LbAgzNgBLJDgWXyYCylbzyuoi5ao7GWI9O0nA8Q3txLqy3Hfs"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
install.packages("tm")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("dplyr")
install.packages("ggplot2")
library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
download.file("ftp://ftp.jax.org/petrs/other/IMGC14.rds", destfile = "IMGC14_tweets.rds", mode="wb")
tweet <- readRDS("IMGC14_tweets.rds")
dt <- data.frame(time = sapply(tweet, function(x) as.character(x$created)),
user = sapply(tweet, function(x) x$screenName),
nRt  = sapply(tweet, function(x) x$retweetCount),
nFav = sapply(tweet, function(x) x$favoriteCount))
# time zone change
dt$time <-  as.POSIXct(format(as.POSIXct(dt$time, tz="UTC"), tz="America/Thunder_Bay"))
dt %>% group_by(user) %>%
summarise(n=n()) %>%
arrange(-n, user) %>%
filter(n>1) %>%
ggplot(aes(x=reorder(user,n),y=n)) +
geom_bar(stat = "identity") +
ylab("Number of tweets") +
xlab("User") +
ggtitle("Users with at least two #IMGC14 tweets") +
coord_flip() +
theme(panel.border = element_rect(colour = 'darkgrey', fill = NA))
ggsave("users.jpeg")
n_distinct(dt$user)
nrow(dt)
dt %>% group_by(user) %>%
summarise(n=n()) %>%
arrange(-n, user) %>%
head(n=1)
ggplot(aes(x=time), data=dt) +
geom_density(fill="#1B9E77", col="#1B9E77", adjust=0.2) +
xlim(as.POSIXct("2014-10-26 4:00:00 EDT"), as.POSIXct("2014-10-30 04:00:00 EDT")) +
xlab("Time") + ylab("Intensity of tweeting") + ggtitle("Twitter timestamps") +
theme(panel.border = element_rect(colour = 'darkgrey', fill = NA))
tweet[which.max(dt$nRt)]
tweet[which.max(dt$nFav)]
tweet_text <- sapply(tweet, function(x) x$getText())
tweet_text_corpus <- Corpus(VectorSource(tweet_text))
tweet_text_corpus <- tm_map(tweet_text_corpus, content_transformer(tolower))
tweet_text_corpus <- tm_map(tweet_text_corpus, removePunctuation)
tweet_text_corpus <- tm_map(tweet_text_corpus, function(x) removeWords(x,stopwords("english")))
tweet_text_corpus <- tm_map(tweet_text_corpus, function(x) removeWords(x,c("imgc14", "stevemunger", "redsoxgal0407", "mice")))
# plot wordcloud
wordcloud(tweet_text_corpus, scale=c(3.5,0.5), max.words=100, min.freq=2,
random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
searchTwitter("#bichicago")
tweets = searchTwitter("bichicago", n=2000, cainfo="cacert.pem")
tweets = searchTwitter("bichicago", n=2000)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","mydata.for")
load("mydata.for")
read.text("mydata.for")
mytext <- file("mydata.for")
head(mytext)
mytext
View(mytext)
readlines(mytext)
require(swirl)
install.packages("swirl")
require(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 10500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version ))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.csv(unz(temp, "PowerConsumption.csv"))
unlink(temp)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"))
head(data)
unlink(temp)
?read.table
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"), sep=";")
unlink(temp)
head(data)
data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE,sep=";")
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE,sep=";")
unlink(temp)
head(data)
head(data[,data$Date == '01/02/2007'])
head(data[Date == '01/02/2007',])
head(data[data$Date == '01/02/2007',])
head(data)
head(data[data$Date == '1/2/2007',])
data <- data[data$Date == '1/1/2007'|data$Date == '1/2/2007',]
head(data)
head(as.date(data$Date))
head(as.Date(data$Date))
?as.Date
head(as.Date(data$Date, format='DD/MM/YYYY'))
head(as.Date(data$Date, format='dd/mm/yyyy'
)
head(as.Date(data$Date, format='dd/mm/yyyy')
head(as.Date(data$Date, format='dd/mm/yyyy')
head(as.Date(data$Date, format='dd/mm/yyyy'))
head(as.Date(data$Date, format='dd/mm/yyyy'))
as.Date(data$Date, format='dd/mm/yyyy')
head(as.Date(data$Date, format='%d/%m/%Y'))
data$Date <- as.Date(data$Date, format='%d/%m/%Y')
head(data)
?strptime
head(strptime(data$Date, format='%h:%m:%s'))
head(strptime(data$Date, format='%H:%M:%S'))
head(strptime(data$Time, format='%H:%M:%S'))
data$DateTime <- paste(data$Date, data$Time)
head(data)
# Download and Unzip data file:
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE,sep=";")
unlink(temp)
# Subset to only the 2 dates required:
data <- data[data$Date == '1/2/2007'|data$Date == '2/2/2007',]
data$Date <- as.Date(data$Date, format='%d/%m/%Y')
head(data)
data$DateTime <- paste(data$Date, data$Time)
head(strptime(data$Time, format='%y-%m-%d %H:%M:%S'))
head(data)
head(as.Date(data$Time, format='%y-%m-%d %H:%M:%S'))
head(as.Date(data$DateTime, format='%y-%m-%d %H:%M:%S'))
head(strptime(data$DateTime, format='%y-%m-%d %H:%M:%S'))
# Download and Unzip data file:
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE,sep=";")
unlink(temp)
# Subset to only the 2 dates required:
data <- data[data$Date == '1/2/2007'|data$Date == '2/2/2007',]
#data$Date <- as.Date(data$Date, format='%d/%m/%Y')
data$DateTime <- paste(data$Date, data$Time)
#head(data)
head(strptime(data$DateTime, format='%d/%m/%y %H:%M:%S'))
head(as.Date(data$DateTime, format='%d/%m/%y %H:%M:%S'))
head(data$DateTime)
?as.Date
head(as.Date(data$DateTime, format='%d/%m/%Y %H:%M:%S'))
head(strptime(data$DateTime, format='%d/%m/%Y %H:%M:%S'))
data$DateTime <- strptime(data$DateTime, format='%d/%m/%Y %H:%M:%S')
head(data)
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
# Download and Unzip data file:
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- read.table(unz(temp, "household_power_consumption.txt"), header=TRUE,sep=";", na.strings = '?')
unlink(temp)
# Subset to only the 2 dates required:
data <- data[data$Date == '1/2/2007'|data$Date == '2/2/2007',]
#data$Date <- as.Date(data$Date, format='%d/%m/%Y')
data$DateTime <- paste(data$Date, data$Time)
#head(data)
data$DateTime <- strptime(data$DateTime, format='%d/%m/%Y %H:%M:%S')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
dev.copy(png, file="plot1.png", height=480, width=480, units='px')
dev.off()
setwd("~/GitHub/ExData_Plotting1/")
dev.copy(png, file="plot1.png", height=480, width=480, units='px')
dev.off()
plot(data$Global_active_power~data$DateTime, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
plot(data$DateTime~data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
str(data$DateTime)
plot(data$DateTime,data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
line(data$DateTime,data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red')
plot(data$DateTime,data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', col='red',type='line')
plot(data$DateTime,data$Global_active_power, xlab='Global Active Power (kilowatts)', main='Global Active Power', type='line')
plot(data$DateTime,data$Global_active_power, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
# Create a PNG file from the plot.
dev.copy(png, file="plot2.png", height=480, width=480, units='px')
dev.off()
str(data$DateTime)
head(data)
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
xyplot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$Sub_metering_2)
lines(data$DateTime,data$Sub_metering_2)
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub-metering_3, col='blue')
lines(data$DateTime,data$Sub_metering_3, col='blue')
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line', legend=TRUE)
legend('topright')
legend('topright','hello')
legend('topright', c('meter1','meter2','meter3') ,
lty=1, col=c('black', 'red', 'blue'))
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
?legend
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'),h=10)
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'),h=30)
# Plot the chart.
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'),h=100)
# Plot the chart.
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'),h=100, w=100)
# Plot the chart.
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'), w=100)
lty=1, col=c('black', 'red', 'blue'))
# Plot the chart.
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
# Plot the chart.
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
# Create a PNG file from the plot.
dev.copy(png, file="plot3.png", height=480, width=480, units='px')
dev.off()
plot(data$DateTime,data$Global_active_power, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
head(data)
plot(data$DateTime,data$Voltage, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
plot(data$DateTime,data$Voltage, xlab='datetime', ylab='Voltage', main='', type='line')
plot(data$DateTime,data$Global_reactive_power, xlab='datetime', main='', type='line')
plot(data$DateTime,data$Global_reactive_power, xlab='datetime', ylab='Global_reactive_power', main='', type='line')
old.par <- par(mfrow=c(2, 2))
#Chart 1
plot(data$DateTime,data$Global_active_power, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
#Chart 2
plot(data$DateTime,data$Voltage, xlab='datetime', ylab='Voltage', main='', type='line')
#Chart 3
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'))
#Chart 4
plot(data$DateTime,data$Global_reactive_power, xlab='datetime', ylab='Global_reactive_power', main='', type='line')
# Create a PNG file from the plot.
dev.copy(png, file="plot4.png", height=480, width=480, units='px')
dev.off()
par(old.par)
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'), cex=0.75)
old.par <- par(mfrow=c(2, 2))
#Chart 1
plot(data$DateTime,data$Global_active_power, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
#Chart 2
plot(data$DateTime,data$Voltage, xlab='datetime', ylab='Voltage', main='', type='line')
#Chart 3
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'), cex=0.75)
#Chart 4
plot(data$DateTime,data$Global_reactive_power, xlab='datetime', ylab='Global_reactive_power', main='', type='line')
# Create a PNG file from the plot.
dev.copy(png, file="plot4.png", height=480, width=480, units='px')
dev.off()
par(old.par)
old.par <- par(mfrow=c(2, 2))
#Chart 1
plot(data$DateTime,data$Global_active_power, xlab='', ylab='Global Active Power (kilowatts)', main='', type='line')
#Chart 2
plot(data$DateTime,data$Voltage, xlab='datetime', ylab='Voltage', main='', type='line')
#Chart 3
plot(data$DateTime,data$Sub_metering_1, xlab='', ylab='Energy sub metering', main='', type='line')
lines(data$DateTime,data$Sub_metering_2, col='red')
lines(data$DateTime,data$Sub_metering_3, col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3') ,
lty=1, col=c('black', 'red', 'blue'), cex=0.5)
#Chart 4
plot(data$DateTime,data$Global_reactive_power, xlab='datetime', ylab='Global_reactive_power', main='', type='line')
# Create a PNG file from the plot.
dev.copy(png, file="plot4.png", height=480, width=480, units='px')
dev.off()
par(old.par)
